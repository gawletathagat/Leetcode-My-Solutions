  vector<int> parents;

class UnionFind {
    public:
  
    int count = 0;
    UnionFind(int n) {
        parents.resize(n);
        for(int i=0; i < n; ++i) parents[i] = i;
    }
    int find(int i) {
        
        if (i == parents[i])    return i;
        parents[i] = find(parents[i]);
        return parents[i];
    }
    void unite(int i, int j) {
        
        int pi = find(i);
        int pj = find(j);
        if(pi != pj) {
            count++;
            parents[pi] = pj;
        }
        
    }
};


class Solution {
public:
    
    
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int mini = INT_MAX, node = -1;
        sort(initial.begin(), initial.end());
        
        for (int p = 0; p < initial.size(); p++) {
            UnionFind uf = UnionFind(graph.size());
            for (int i = 0; i < graph.size(); i++) {
                if (i == initial[p]) continue;
                for (int j = 0; j < graph[i].size(); j++) {
                    if (j != initial[p] && i != j && graph[i][j] == 1) {
                        uf.unite(i, j);
                    }
                }
            }
            
             for( int i= 0 ; i<graph.size() ; i++)
            cout<<parents[i]<<" ";
            cout<<endl;
            
            map<int, int> vmap1;
            for (int i = 0; i < graph.size(); i++) {
                if (i != initial[p])    vmap1[uf.find(i)]++;
            }
            map<int, bool> vmap2;
            int count = 0;
            for (int i = 0; i < initial.size(); i++) {
                if (i != p) {
                    int val = uf.find(initial[i]);
                    if (vmap1.find(val) != vmap1.end() && vmap2.find(val) == vmap2.end()) {
                        vmap2[val] = true;
                        count += vmap1[val];
                    }
                } 
            }
         
            if (count < mini) {
                mini = count;
                node = initial[p];
            } 
        }
        
       
        
        return node;
    }
};